// prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  output         = "./src/prisma/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  extensions = [pg_crypto, uuid_ossp]
}

model Usuario {
  id           String             @id @default(uuid())
  nome         String
  email        String             @unique
  telefone     String?            @db.VarChar(20)
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  reservas     Reserva[]
  historico    HistoricoUsuario[]
  pedidos      Pedido[]

  @@map("usuarios")
  @@index([email])
}

model Restaurante {
  id               String             @id @default(uuid())
  nome             String
  descricao        String?
  capacidade       Int                @default(50)
  estacoesPreparo  Int                @default(2) @map("estacoes_preparo")
  tempoMedioPreparo Int               @default(15) @map("tempo_medio_preparo")
  categorias       String[]
  fila             Fila?
  reservas         Reserva[]
  pedidos          Pedido[]
  historicoUsuarios HistoricoUsuario[]
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  @@map("restaurantes")
  @@index([nome])
  @@index([categorias]) // √çndice para arrays
}

model Fila {
  id             String     @id @default(uuid())
  restaurante    Restaurante @relation(fields: [restauranteId], references: [id])
  restauranteId  String     @unique
  tamanho        Int        @default(0)
  tempoEstimado  Int        @default(0) @map("tempo_estimado")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@map("filas")
  @@index([restauranteId, updatedAt])
}

model Reserva {
  id             String     @id @default(uuid())
  usuario        Usuario    @relation(fields: [usuarioId], references: [id])
  usuarioId      String
  restaurante    Restaurante @relation(fields: [restauranteId], references: [id])
  restauranteId  String
  horario        DateTime
  status         String     @default("pendente") @db.VarChar(20)
  isPriority     Boolean    @default(false) @map("is_priority")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@map("reservas")
  @@index([restauranteId, status, horario])
  @@index([usuarioId, horario])
  @@unique([usuarioId, restauranteId, horario])
}

model HistoricoUsuario {
  id             String     @id @default(uuid())
  usuario        Usuario    @relation(fields: [usuarioId], references: [id])
  usuarioId      String
  restaurante    Restaurante @relation(fields: [restauranteId], references: [id])
  restauranteId  String
  visitas        Int        @default(1)
  avaliacaoMedia Float?     @default(0.0) @map("avaliacao_media")
  ultimaVisita   DateTime   @default(now()) @map("ultima_visita")

  @@map("historico_usuarios")
  @@unique([usuarioId, restauranteId])
  @@index([restauranteId, avaliacaoMedia])
}

model Pedido {
  id             String    @id @default(uuid())
  cliente        Usuario   @relation(fields: [clienteId], references: [id])
  clienteId      String
  restaurante    Restaurante @relation(fields: [restauranteId], references: [id])
  restauranteId  String
  itens          Json      @db.JsonB
  valorTotal     Float     @default(0.0) @map("valor_total")
  status         String    @default("pendente") @db.VarChar(20)
  isPriority     Boolean   @default(false) @map("is_priority")
  prioridade     Int?
  tempoPreparo   Int?      @map("tempo_preparo")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@map("pedidos")
  @@index([restauranteId, status, prioridade])
  @@index([isPriority, prioridade])
  @@index([clienteId, createdAt])
}